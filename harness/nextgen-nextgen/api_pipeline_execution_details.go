
/*
 * Harness NextGen Software Delivery Platform API Reference
 *
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub
 *
 * API version: 3.0
 * Contact: contact@harness.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PipelineExecutionDetailsApiService service
/*
PipelineExecutionDetailsApiService Fetch Pipeline Execution Details
Returns the Pipeline Execution Details for a Given PlanExecution ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountIdentifier Account Identifier for the Entity.
 * @param orgIdentifier Organization Identifier for the Entity.
 * @param projectIdentifier Project Identifier for the Entity.
 * @param planExecutionId Plan Execution Id for which we want to get the Execution details
 * @param optional nil or *PipelineExecutionDetailsApiGetExecutionDetailOpts - Optional Parameters:
     * @param "StageNodeId" (optional.String) -  Stage Node Identifier for which Stage Graph needs to be Rendered
     * @param "StageNodeExecutionId" (optional.String) -  Stage Node Execution ID for which Stage Graph needs to be Rendered. (Needed only when there are Multiple Runs for a Given Stage. It can be Extracted from LayoutNodeMap Field)
@return ResponseDtoPipelineExecutionDetail
*/

type PipelineExecutionDetailsApiGetExecutionDetailOpts struct {
    StageNodeId optional.String
    StageNodeExecutionId optional.String
}

func (a *PipelineExecutionDetailsApiService) GetExecutionDetail(ctx context.Context, accountIdentifier string, orgIdentifier string, projectIdentifier string, planExecutionId string, localVarOptionals *PipelineExecutionDetailsApiGetExecutionDetailOpts) (ResponseDtoPipelineExecutionDetail, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseDtoPipelineExecutionDetail
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pipeline/api/pipelines/execution/{planExecutionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"planExecutionId"+"}", fmt.Sprintf("%v", planExecutionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	localVarQueryParams.Add("orgIdentifier", parameterToString(orgIdentifier, ""))
	localVarQueryParams.Add("projectIdentifier", parameterToString(projectIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.StageNodeId.IsSet() {
		localVarQueryParams.Add("stageNodeId", parameterToString(localVarOptionals.StageNodeId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StageNodeExecutionId.IsSet() {
		localVarQueryParams.Add("stageNodeExecutionId", parameterToString(localVarOptionals.StageNodeExecutionId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["x-api-key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ResponseDtoPipelineExecutionDetail
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PipelineExecutionDetailsApiService Fetch Pipeline Execution Details
Returns the Pipeline Execution Details for a Given PlanExecution ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountIdentifier Account Identifier for the Entity.
 * @param orgIdentifier Organization Identifier for the Entity.
 * @param projectIdentifier Project Identifier for the Entity.
 * @param planExecutionId Plan Execution Id for which we want to get the Execution details
 * @param optional nil or *PipelineExecutionDetailsApiGetExecutionDetailV2Opts - Optional Parameters:
     * @param "StageNodeId" (optional.String) -  Stage Node Identifier for which Stage Graph needs to be Rendered
     * @param "StageNodeExecutionId" (optional.String) -  Stage Node Execution ID for which Stage Graph needs to be Rendered. (Needed only when there are Multiple Runs for a Given Stage. It can be Extracted from LayoutNodeMap Field)
     * @param "RenderFullBottomGraph" (optional.Bool) -  Generate Graph for all the Stages including Steps in each Stage
@return ResponseDtoPipelineExecutionDetail
*/

type PipelineExecutionDetailsApiGetExecutionDetailV2Opts struct {
    StageNodeId optional.String
    StageNodeExecutionId optional.String
    RenderFullBottomGraph optional.Bool
}

func (a *PipelineExecutionDetailsApiService) GetExecutionDetailV2(ctx context.Context, accountIdentifier string, orgIdentifier string, projectIdentifier string, planExecutionId string, localVarOptionals *PipelineExecutionDetailsApiGetExecutionDetailV2Opts) (ResponseDtoPipelineExecutionDetail, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseDtoPipelineExecutionDetail
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pipeline/api/pipelines/execution/v2/{planExecutionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"planExecutionId"+"}", fmt.Sprintf("%v", planExecutionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	localVarQueryParams.Add("orgIdentifier", parameterToString(orgIdentifier, ""))
	localVarQueryParams.Add("projectIdentifier", parameterToString(projectIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.StageNodeId.IsSet() {
		localVarQueryParams.Add("stageNodeId", parameterToString(localVarOptionals.StageNodeId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StageNodeExecutionId.IsSet() {
		localVarQueryParams.Add("stageNodeExecutionId", parameterToString(localVarOptionals.StageNodeExecutionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RenderFullBottomGraph.IsSet() {
		localVarQueryParams.Add("renderFullBottomGraph", parameterToString(localVarOptionals.RenderFullBottomGraph.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["x-api-key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ResponseDtoPipelineExecutionDetail
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PipelineExecutionDetailsApiService List Executions
Returns a List of Pipeline Executions with Specific Filters
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountIdentifier Account Identifier for the Entity.
 * @param orgIdentifier Organization Identifier for the Entity.
 * @param projectIdentifier Project Identifier for the Entity.
 * @param optional nil or *PipelineExecutionDetailsApiGetListOfExecutionsOpts - Optional Parameters:
     * @param "Body" (optional.Interface of FilterProperties) - 
     * @param "SearchTerm" (optional.String) -  Search term to filter out pipelines based on pipeline name, identifier, tags.
     * @param "PipelineIdentifier" (optional.String) -  Pipeline Identifier filter if exact pipelines needs to be filtered.
     * @param "Page" (optional.Int32) -  Page Index of the results to fetch.Default Value: 0
     * @param "Size" (optional.Int32) -  Results per page
     * @param "Sort" (optional.Interface of []string) -  Sort criteria for the elements.
     * @param "FilterIdentifier" (optional.String) - 
     * @param "Module" (optional.String) - 
     * @param "Status" (optional.Interface of []string) - 
     * @param "MyDeployments" (optional.Bool) - 
     * @param "Branch" (optional.String) -  Name of the branch.
     * @param "RepoIdentifier" (optional.String) -  Git Sync Config Id.
     * @param "GetDefaultFromOtherRepo" (optional.Bool) -  if true, return all the default entities
@return ResponseDtoPagePipelineExecutionSummary
*/

type PipelineExecutionDetailsApiGetListOfExecutionsOpts struct {
    Body optional.Interface
    SearchTerm optional.String
    PipelineIdentifier optional.String
    Page optional.Int32
    Size optional.Int32
    Sort optional.Interface
    FilterIdentifier optional.String
    Module optional.String
    Status optional.Interface
    MyDeployments optional.Bool
    Branch optional.String
    RepoIdentifier optional.String
    GetDefaultFromOtherRepo optional.Bool
}

func (a *PipelineExecutionDetailsApiService) GetListOfExecutions(ctx context.Context, accountIdentifier string, orgIdentifier string, projectIdentifier string, localVarOptionals *PipelineExecutionDetailsApiGetListOfExecutionsOpts) (ResponseDtoPagePipelineExecutionSummary, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseDtoPagePipelineExecutionSummary
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pipeline/api/pipelines/execution/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	localVarQueryParams.Add("orgIdentifier", parameterToString(orgIdentifier, ""))
	localVarQueryParams.Add("projectIdentifier", parameterToString(projectIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.SearchTerm.IsSet() {
		localVarQueryParams.Add("searchTerm", parameterToString(localVarOptionals.SearchTerm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PipelineIdentifier.IsSet() {
		localVarQueryParams.Add("pipelineIdentifier", parameterToString(localVarOptionals.PipelineIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.FilterIdentifier.IsSet() {
		localVarQueryParams.Add("filterIdentifier", parameterToString(localVarOptionals.FilterIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Module.IsSet() {
		localVarQueryParams.Add("module", parameterToString(localVarOptionals.Module.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.MyDeployments.IsSet() {
		localVarQueryParams.Add("myDeployments", parameterToString(localVarOptionals.MyDeployments.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Branch.IsSet() {
		localVarQueryParams.Add("branch", parameterToString(localVarOptionals.Branch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoIdentifier.IsSet() {
		localVarQueryParams.Add("repoIdentifier", parameterToString(localVarOptionals.RepoIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GetDefaultFromOtherRepo.IsSet() {
		localVarQueryParams.Add("getDefaultFromOtherRepo", parameterToString(localVarOptionals.GetDefaultFromOtherRepo.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["x-api-key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ResponseDtoPagePipelineExecutionSummary
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
